You are given a binary tree, and a list of nodes to delete.
After deleting all nodes in to_delete, we are left with a forest (a disjoint union of one or more trees).
Return a list with a representation of each of these trees.

Note: The representation of the tree is a list that follows a slightly modified heap pattern: [root, root-left, root-right, root-left-left, root-left-right, root-right-left, ...].
For any index i you can find its left child at 2i + 1 and right at 2i + 2.
Any non-existent child would be represented by null to keep that property consistent. 

[1,2,3] becomes the tree
      1
    2   3 

[1,null,3] becomes a tree without a left child.
     1
       3

Example 1:
Input: tree = [1,2,3], to_delete = [1]
Output: [ [2], [3] ]

Example 2:
Input: tree = [1,2,3,4], to_delete = [4]
Output: [ [1, 2, 3] ]

Example 3:
Input: tree = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [ [1, 2, null, 4], [6], [7]]

Constraints:
Each node in the tree has a distinct value.
Each value in to_delete is distinct.
